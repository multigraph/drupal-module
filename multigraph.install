<?php
// $Id$
/**
 * @file
 * Install file for Multigraph module.
 */

/**
 * Implements hook_install().
 */
function multigraph_install() {
  node_types_rebuild();

  foreach (_multigraph_field_specs() as $field_spec) {
    field_create_field($field_spec['field_config']);
    $instance = $field_spec['field_instance'];
    $instance['entity_type'] = 'node';
    $instance['bundle'] = 'multigraph';
    field_create_instance($instance);
  }

}

/*
 * Return an array of "Field Spec" arrays, one for each field to be defined for the Multigraph
 * content type.  Each Field Spec array has exactly two keys:
 *    'field_config':   a field definition array, as expected by field_create_field()
 *    'field_instance': a field instance definition array, as expected by field_create_instance()
 * Note: the Field Spec array concept is just a convenience used within this module's code; it is
 * not part of Drupal's Field API  The field definition array, and field instance definition array,
 * however, are part of the Field API.
 */
function _multigraph_field_specs() {

  $field_specs = array();

  $field_specs[] = _multigraph_textarea_field_spec(array(
    'field_name'  	      => 'field_multigraph_description',
    'label'       	      => 'Description',
    'description' 	      => 'Enter an optional description for this graph here.',
    'required'    	      => 0,
    'widget_rows'             => 2,
    'widget_weight'           => 10,
    'default_display_label'   => 'hidden',
    'default_display_type'    => 'text_default',
    'default_display_weight'  => 10,
    'teaser_display_label'    => 'hidden',
    'teaser_display_type'     => 'text_default',
    'teaser_display_weight'   => 10,
  ));

  $field_specs[] = _multigraph_dimension_field(array(
    'field_name' 	      => 'field_multigraph_width',
    'label'      	      => 'Default Width',
    'description' 	      => 'The default width, in pixels, for this graph.  This width'
    .                            ' may be overridden any place where this graph is embedded.',
    'default_value' 	      => 500,
    'min_value' 	      => 1,
    'max_value' 	      => 2000,
    'widget_weight' 	      => 20,
    'default_display_weight'  => 20,
  ));

  $field_specs[] = _multigraph_dimension_field(array(
    'field_name' 	      => 'field_multigraph_height',
    'label'      	      => 'Default Height',
    'description' 	      => 'The default height, in pixels, for this graph.  This height'
    .                            ' may be overridden any place where this graph is embedded.',
    'default_value' 	      => 400,
    'min_value' 	      => 1,
    'max_value' 	      => 2000,
    'widget_weight' 	      => 30,
    'default_display_weight'  => 30,
  ));

  $field_specs[] = _multigraph_textarea_field_spec(array(
    'field_name'  	      => 'field_multigraph_mugl',
    'label'       	      => 'MUGL',
    'description' 	      => 'Enter the MUGL for this graph here.',
    'required'    	      => 1,
    'widget_rows'             => 10,
    'widget_weight'           => 40,
    'default_display_label'   => 'hidden',
    'default_display_type'    => 'hidden',
    'default_display_weight'  => 40,
    'teaser_display_label'    => 'hidden',
    'teaser_display_type'     => 'hidden',
    'teaser_display_weight'   => 40,
  ));

  return $field_specs;
}


/*
 * Return a Field Spec array for an integer dimension field; this is used to define
 * the Multigraph's "width" and "height" fields.  This function takes a single array
 * argument having the following keys:
 *
 *    'field_name'  	       => 'field_multigraph_description'
 *    'label'       	       => 'Description'
 *    'description' 	       => 'Enter an optional description for this graph here.',
 *    'required'    	       => 0
 *    'widget_rows'            => '2'
 *    'widget_weight'          => '-4'
 *    'default_display_label   => 'above'
 *    'default_display_weight  => '0'
 *    'teaser_display_label    => 'above'
 *    'teaser_display_weight   => '0'
 */
function _multigraph_textarea_field_spec($field_spec_values) {

  return array(

    'field_config' => array(
      'field_name'   => $field_spec_values['field_name'],
      'type'         => 'text_long',
      'cardinality'  => '1',
      'active'       => '1',
      'module'       => 'text',
    ),

    'field_instance' => array(
      'field_name'  => $field_spec_values['field_name'],
      'label'       => $field_spec_values['label'],
      'description' => $field_spec_values['description'],
      'required'    => $field_spec_values['required'],
      'widget'      => array(
        'active'      => 1,
        'module'      => 'text',
        'settings'    => array(
          'rows'        => $field_spec_values['widget_rows'],
        ),
        'type'        => 'text_textarea',
        'weight'      => $field_spec_values['widget_weight'],
      ),
      'display' => array(
        'default' => array(
          'label'    => $field_spec_values['default_display_label'],
          'module'   => 'text',
          'settings' => array(),
          'type'     => $field_spec_values['default_display_type'],
          'weight'   => $field_spec_values['default_display_weight'],
        ),
        'teaser' => array(
          'label'    => $field_spec_values['teaser_display_label'],
          'settings' => array(),
          'type'     => $field_spec_values['teaser_display_type'],
          'weight'   => $field_spec_values['teaser_display_weight'],
        ),
      ),
      'settings' => array(
        'text_processing'    => '0',
        'user_register_form' => FALSE,
      ),
    ),

  );

}



/*
 * Return a Field Spec array for an integer dimension field; this is used to define
 * the Multigraph's "width" and "height" fields.  This function takes a single array
 * argument having the following keys:
 *
 *   'field_name' 	      => 'field_multigraph_width'
 *   'label'      	      => 'Default Width'
 *   'description' 	      => 'The default width, in pixels, for this graph.  This width may be overridden any place where this graph is embedded.'
 *   'default_value' 	      => '400'
 *   'min_value' 	      => '1'
 *   'max_value' 	      => '2000'
 *   'widget_weight' 	      => '-2'
 *   'default_display_weight' => '2'
 */
function _multigraph_dimension_field($field_spec_values) {


  return array(

    'field_config' => array(
      'field_name'   => $field_spec_values['field_name'],
      'type'         => 'number_integer',
      'cardinality'  => '1',
      'active'       => '1',
      'module'       => 'number',
    ),

    'field_instance' => array(
      'field_name' => $field_spec_values['field_name'],
      'label' => $field_spec_values['label'],
      'required' => 1,
      'description' => $field_spec_values['description'],
      'default_value' => array(0 => array('value' => $field_spec_values['default_value'])),
      'settings' => array(
        'max'    => $field_spec_values['max_value'],
	'min'    => $field_spec_values['min_value'],
        'prefix' => '',
        'suffix' => '',
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active'   => 0,
        'module'   => 'number',
        'settings' => array(),
        'type'     => 'number',
        'weight'   => $field_spec_values['widget_weight'],
      ),


      'deleted' => '0',
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'module' => 'number',
          'settings' => array(
            'decimal_separator' => '.',
            'prefix_suffix' => TRUE,
            'scale' => 0,
            'thousand_separator' => ' ',
          ),
          'type' => 'hidden',
          'weight' => $field_spec_values['default_display_weight'],
        ),
        'teaser' => array(
          'label' => 'hidden',
          'settings' => array(),
          'type' => 'hidden',
          'weight' => 0,
        ),
      ),
    ),
  );

}

/**
 * Implements hook_uninstall().
 */
function multigraph_uninstall() {
  // Gather all the example content that might have been created while this
  // module was enabled.
  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
  $result = db_query($sql, array(':type' => 'multigraph'));
  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }

  // Delete all the nodes at once
  node_delete_multiple($nids);

  // Loop over each of the fields defined by this module and delete
  // all instances of the field, their data, and the field itself.
  //foreach (array_keys(_multigraph_installed_fields()) as $field) {
  foreach (_multigraph_field_specs() as $field) {
    field_delete_field($field['field_config']['field_name']);
  }

  // Loop over any remaining field instances attached to the multigraph
  // content type (such as the body field) and delete them individually.
  $instances = field_info_instances('node', 'multigraph');
  foreach ($instances as $instance_name => $instance) {
    field_delete_instance($instance);
  }

  // Delete our content type
  node_type_delete('multigraph');

  // Purge all field infromation
  field_purge_batch(1000);
}
