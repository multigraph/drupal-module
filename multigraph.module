<?php
// $Id$

/**
 * @file
 * This module provides a node type called Multigraph
 */

/**
 * Implements hook_node_info() to provide our multigraph type.
 */
function multigraph_node_info() {
  return array(
    'multigraph' => array(
      'name'        => t('Multigraph'),
      'base'        => 'multigraph',
      'description' => t('Use <i>multigraphs</i> to create interactive graph content with Multigraph.'),
      'has_title'   => TRUE,
      'title_label' => t('Title'),
      'help'        => t('Enter a title, description, width, height, and the MUGL (xml) for a Multigraph.'),
    ),
  );
}

function _multigraph_string_ends_with($string, $suffix) {
  $suffix_len = strlen($suffix);
  $string_len = strlen($string);
  for ($i=1; $i<=$suffix_len; ++$i) {
    if ($string[$string_len-$i] != $suffix[$suffix_len-$i]) {
      return false;
    }
  }
  return true;
}

function _multigraph_available_swf_paths() {
  $swf_dir = drupal_get_path('module', 'multigraph') . "/swfs";
  $handle = opendir($swf_dir);
  $swf_paths = array();
  while (false !== ($entry = readdir($handle))) {
    if (_multigraph_string_ends_with($entry, ".swf")) {
      $swf_paths[] = $entry;
    }
  }
  closedir($handle);
  arsort($swf_paths);
  return $swf_paths;
}

/**
 * Implement hook_form() with the standard default form.
 */
function multigraph_form($node, $form_state) {
  /*
  foreach (_multigraph_available_swf_paths() as $swf_path) {
    dsm($swf_path);
  }
  */
  return node_content_form($node, $form_state);
}


/**
 * Implementation of hook_menu_alter().
 */
function multigraph_menu_alter(&$callbacks) {
  // If the user does not have 'administer nodes' permission,
  // disable the multigraph menu item by setting its access callback to FALSE.
  /*
    ?????????
    sometimes the following user_access() returns false, even for the admin user, even
    when the admin user DOES still have 'administer nodes' perm.  WHY WHY WHY???
    ?????????
  if (!user_access('administer nodes')) {
    $callbacks['node/add/multigraph']['access callback'] = FALSE;
    // Must unset access arguments or Drupal will use user_access()
    // as a default access callback.
    unset($callbacks['node/add/multigraph']['access arguments']);
  }
  */
}

/**
 * Implementation of hook_permission().
 */
function multigraph_permission() { 
  return array(
  'create multigraph' => array(
    'title' => t('Create a multigraph'),
    'description' => t('Create a multigraph'),
  ),
  'edit own multigraph' => array(
    'title' => t('Edit own multigraph'),
    'description' => t('Edit your own multigraph'),
  ),
  'edit any multigraph' => array(
    'title' => t('Edit any multigraph'),
    'description' => t('Edit any multigraph'),
  ),
  'delete own multigraph' => array(
    'title' => t('Delete own multigraph'),
    'description' => t('Delete own multigraph'),
  ),
  'delete any multigraph' => array(
    'title' => t('Delete any multigraph'),
    'description' => t('Delete any multigraph'),
  ),
 );
}


/**
 * Implementation of hook_validate().
 */
function multigraph_validate($node) {
  // Enforce a minimum character count of 2 on company names.
//  if (isset($node->multigraph_company) && strlen($node->multigraph_company['und'][0]['value']) < 2) {
//    form_set_error('multigraph_company', t('The company name line of your multigraph is too short. You need at least 2 characters.'), $limit_validation_errors = NULL);
//  }
}


/**
 * Implementation of hook_insert().
 */
function multigraph_insert($node) {
// log details of the multigraphing to watchdog  
//  watchdog('multigraph', 'A new multigraph titled: '.$node->title.' for company: '.$node->multigraph_company['und'][0]['value'].' was added by UID: '.$node->uid, $variables = array(), WATCHDOG_NOTICE, $link = 'node/'.$node->nid);  
}


/**
 * Implementation of hook_update().
 */
 function multigraph_update($node) { 
// log details of the multigraphing to watchdog  
//  watchdog('multigraph', 'A multigraph titled: '.$node->title.' for company: '.$node->multigraph_company['und'][0]['value'].' was updated by UID: '.$node->uid, $variables = array(), WATCHDOG_NOTICE, $link = 'node/'.$node->nid);
 }
 
/**
 * Implementation of hook_delete().
 */
 function multigraph_delete($node) { 
// log details of the multigraphing to watchdog  
//  watchdog('multigraph', 'A multigraph titled: '.$node->title.' for company: '.$node->multigraph_company['und'][0]['value'].' was deleted by UID: '.$node->uid, $variables = array(), WATCHDOG_NOTICE, $link = 'node/'.$node->nid);
 } 
 
 
/**
 * Implementation of hook_load().
 */
function multigraph_load($nodes) { 
// Add a new element to the node at load time for storing the multigraphing sponsor information
//  foreach ($nodes as $node) {
//     $node->sponsor = "ACME Career Services, Your Source for Drupal Jobs";
//  }  
//  return $node;
} 
 
/**
 * Implement hook_view().
 */
function multigraph_view($node, $view_mode) { 
  if ($view_mode == 'full') {
    $node->content['graph'] = array(
      '#markup' => theme('graph',
			 array('mugl'   => $node->field_multigraph_mugl['und']['0']['value'],
			       'width'  => $node->field_multigraph_width['und']['0']['value'],
			       'height' => $node->field_multigraph_height['und']['0']['value'])),
      '#weight' => 0,
    );
    unset($node->field_multigraph_mugl);
  }
  return $node; 
} 
 

 
/**
 * Implementation of hook_theme().
 */
function multigraph_theme() {
  return array(
    'graph' => array('variables' => array('mugl'   => NULL,
					  'width'  => NULL,
					  'height' => NULL),
		     'template'  => 'graph',
    ),
  );
}
