<?php

/**
 * @file
 * This module provides a node type called Multigraph
 */

/**
 * Implements hook_node_info() to provide our multigraph type.
 */
function multigraph_node_info() {
  return array(
    'multigraph' => array(
      'name'        => t('Multigraph'),
      'base'        => 'multigraph',
      'description' => t('Use <i>multigraphs</i> to create interactive graph content with Multigraph.'),
      'has_title'   => TRUE,
      'title_label' => t('Title'),
      'help'        => t('Enter a title, description, width, height, and the MUGL (xml) for a Multigraph.'),
    ),
  );
}

function multigraph_menu() {
  $items['multigraph/mugl/%'] = array(
    'title'           => 'MUGL SERVICE URI',
    'type'            => MENU_CALLBACK,
    'page callback'   => '_multigraph_muglservice_controller',
    'page arguments'  => array(2),
    'access callback' => TRUE,
  );
  return $items;
}


function _multigraph_muglservice_controller($nid) {
  $node = node_load($nid);
  if (!$node || $node->type != 'multigraph') {
    $mugl = 'What?';
  } else {
    $mugl = $node->field_multigraph_mugl['und']['0']['value'];
  }

  header('Content-type: text/xml');
  print $mugl;
  exit();
}

function _multigraph_string_ends_with($string, $suffix) {
  $suffix_len = strlen($suffix);
  $string_len = strlen($string);
  for ($i=1; $i<=$suffix_len; ++$i) {
    if ($string[$string_len-$i] != $suffix[$suffix_len-$i]) {
      return false;
    }
  }
  return true;
}

function _multigraph_available_swf_path_allowed_values() {
  $allowed_values = array();
  foreach (_multigraph_available_swf_paths() as $swf_path) {
    $allowed_values[$swf_path] = $swf_path;
  }
  return $allowed_values;
}

function _multigraph_available_swf_paths() {
  $swf_dir = drupal_get_path('module', 'multigraph') . "/swfs";
  $handle = opendir($swf_dir);
  $swf_paths = array();
  while (false !== ($entry = readdir($handle))) {
    if (preg_match('|^multigraph.*\.swf$|i', $entry)) {
      $swf_paths[] = $entry;
    }
  }
  closedir($handle);
  arsort($swf_paths);
  return $swf_paths;
}

/**
 * Implement hook_form() with the standard default form.
 */
function multigraph_form($node, $form_state) {
  /*
  foreach (_multigraph_available_swf_paths() as $swf_path) {
    dsm($swf_path);
  }
  */
  $form = node_content_form($node, $form_state);
  return $form;
}


function multigraph_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'multigraph_node_form') {
    if ((count($form['field_multigraph_swf']['und']['#default_value']) <= 0)
	||
	(!in_array($form['field_multigraph_swf']['und']['#default_value']['0'],
		   $form['field_multigraph_swf']['und']['#options']))) {
      $swf_paths = _multigraph_available_swf_paths();
      $form['field_multigraph_swf']['und']['#default_value'] = $swf_paths[count($swf_paths)-1];
    }
  }
}



/**
 * Implementation of hook_menu_alter().
 */
function multigraph_menu_alter(&$callbacks) {
  // If the user does not have 'administer nodes' permission,
  // disable the multigraph menu item by setting its access callback to FALSE.
  /*
    ?????????
    sometimes the following user_access() returns false, even for the admin user, even
    when the admin user DOES still have 'administer nodes' perm.  WHY WHY WHY???
    ?????????
  if (!user_access('administer nodes')) {
    $callbacks['node/add/multigraph']['access callback'] = FALSE;
    // Must unset access arguments or Drupal will use user_access()
    // as a default access callback.
    unset($callbacks['node/add/multigraph']['access arguments']);
  }
  */
}

/**
 * Implementation of hook_permission().
 */
function multigraph_permission() { 
  return array(
  'create multigraph' => array(
    'title' => t('Create a multigraph'),
    'description' => t('Create a multigraph'),
  ),
  'edit own multigraph' => array(
    'title' => t('Edit own multigraph'),
    'description' => t('Edit your own multigraph'),
  ),
  'edit any multigraph' => array(
    'title' => t('Edit any multigraph'),
    'description' => t('Edit any multigraph'),
  ),
  'delete own multigraph' => array(
    'title' => t('Delete own multigraph'),
    'description' => t('Delete own multigraph'),
  ),
  'delete any multigraph' => array(
    'title' => t('Delete any multigraph'),
    'description' => t('Delete any multigraph'),
  ),
 );
}


/**
 * Implementation of hook_validate().
 */
function multigraph_validate($node) {
  // Enforce a minimum character count of 2 on company names.
//  if (isset($node->multigraph_company) && strlen($node->multigraph_company['und'][0]['value']) < 2) {
//    form_set_error('multigraph_company', t('The company name line of your multigraph is too short. You need at least 2 characters.'), $limit_validation_errors = NULL);
//  }
}


/**
 * Implementation of hook_insert().
 */
function multigraph_insert($node) {
// log details of the multigraphing to watchdog  
//  watchdog('multigraph', 'A new multigraph titled: '.$node->title.' for company: '.$node->multigraph_company['und'][0]['value'].' was added by UID: '.$node->uid, $variables = array(), WATCHDOG_NOTICE, $link = 'node/'.$node->nid);  
}


/**
 * Implementation of hook_update().
 */
 function multigraph_update($node) { 
// log details of the multigraphing to watchdog  
//  watchdog('multigraph', 'A multigraph titled: '.$node->title.' for company: '.$node->multigraph_company['und'][0]['value'].' was updated by UID: '.$node->uid, $variables = array(), WATCHDOG_NOTICE, $link = 'node/'.$node->nid);
 }
 
/**
 * Implementation of hook_delete().
 */
 function multigraph_delete($node) { 
// log details of the multigraphing to watchdog  
//  watchdog('multigraph', 'A multigraph titled: '.$node->title.' for company: '.$node->multigraph_company['und'][0]['value'].' was deleted by UID: '.$node->uid, $variables = array(), WATCHDOG_NOTICE, $link = 'node/'.$node->nid);
 } 
 
 
/**
 * Implementation of hook_load().
 */
function multigraph_load($nodes) { 
// Add a new element to the node at load time for storing the multigraphing sponsor information
//  foreach ($nodes as $node) {
//     $node->sponsor = "ACME Career Services, Your Source for Drupal Jobs";
//  }  
//  return $node;
} 
 
/**
 * Implement hook_view().
 */
function multigraph_view($node, $view_mode) { 
  if ($view_mode == 'full') {
    $width  = $node->field_multigraph_width['und']['0']['value'];
    $height = $node->field_multigraph_height['und']['0']['value'];
    $swf    = $node->field_multigraph_swf['und']['0']['value'];
    $node->content['graph'] = array(
      '#markup' => theme('graph',
			 array('nid'    => $node->nid,
			       'mugl'   => $node->field_multigraph_mugl['und']['0']['value'],
			       'width'  => $node->field_multigraph_width['und']['0']['value'],
			       'height' => $node->field_multigraph_height['und']['0']['value'],
			       'swf'    => $node->field_multigraph_swf['und']['0']['value'],
			       'flashcode' => _multigraph_object_embed_string($width,$height,
									      base_path()
									      . "multigraph/mugl/" . $node->nid,
									      base_path()
									      . drupal_get_path('module', 'multigraph')
									      . "/swfs/"
									      . $swf))
			 ),
      '#weight' => 0,
    );
    unset($node->field_multigraph_mugl);
  }
  return $node; 
}
 

 
/**
 * Implementation of hook_theme().
 */
function multigraph_theme() {
  return array(
    'graph' => array('variables' => array('nid'    => NULL,
					  'mugl'   => NULL,
					  'width'  => NULL,
					  'height' => NULL,
					  'swf'    => NULL,
					  'flashcode'    => NULL),
		     'template'  => 'graph',
    ),
  );
}

function _multigraph_object_embed_string($width,$height,$mugl_url,$swf) {
    return (''
    	   . '<object'
	   .    ' id="mgid"'
           .    ' classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000"'
           .    ' width="'.$width.'"'
           .    ' height="'.$height.'"'
           .    ' codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0">'
           .   '<param name="quality" value="best" />'
           .   '<param name="scale" value="exactfit" />'
           .   '<param name="wmode" value="opaque" />'
           .   '<param name="bgcolor" value="#ffffff" />'
           .   '<param name="src" value="'.$swf.'" />'
           .   '<param name="name" value="mgid" />'
           .   '<param name="allowfullscreen" value="false" />'
           .   '<param name="allowScriptAccess" value="sameDomain" />'
           .   "<param name='flashvars' value='muglfile=".$mugl_url."'>"
           .   '<param name="align" value="middle" />'
           .   '<embed'
           .      ' id="mgid"'
           .      ' type="application/x-shockwave-flash"'
           .      ' width="'.$width.'"'
           .      ' height="'.$height.'"'
           .      ' src="'.$swf.'"'
           .      ' name="mgid"'
           .      ' bgcolor="#ffffff"'
           .      ' wmode="opaque"'
           .      ' scale="exactfit"'
           .      ' quality="best"'
           .      ' allowfullscreen="false"'
           .      ' allowscriptaccess="sameDomain"'
           .      " flashvars='muglfile=".$mugl_url."'"
           .      ' align="middle">'
           .   '</embed>'
           . '</object>'
  );
}

function multigraph_filter_prepare($text, $filter, $format, $langcode, $cache, $cache_id) {
  // Escape <multigraph ... />
  $text = preg_replace('|<multigraph\s(.*)/>|', "[multigraph]$1[/multigraph]", $text);
  return $text;
}

function _multigraph_edit_tag( $matches )
{
  global $base_url, $base_path;

  $width = FALSE;
  $height = FALSE;
  $src = FALSE;
  $swf = FALSE;
  $nid = FALSE;
  $node = null;
  
  $assignments = preg_split('/\s+/', trim($matches[1]));
  $args = array();
  for ($i=0; $i<count($assignments); ++$i) {
    list($var,$val) = preg_split('/=/', $assignments[$i]);
    $val = preg_replace('/^"(.*)"$/', "$1", $val);
    $args[$var] = $val;
  }
  if (array_key_exists('width',$args))  { $width        = $args['width']; }
  if (array_key_exists('height',$args)) { $height       = $args['height']; }
  if (array_key_exists('src',$args))    { $src          = $args['src']; }
  if (array_key_exists('swf',$args))    { $swf          = $args['swf']; }
  if (array_key_exists('nid',$args))    { $nid          = $args['nid']; }

  // if a nid wasn't specified, check the src value, if present, to see if it looks
  // like a "multigraph/mugl/%" url from this site, and if so, get the nid value from it
  if (!$nid && $src) {
    if (preg_match("|^$base_url/multigraph/mugl/(\d+)$|", $src, $matches)) {
      // absolute url from this site
      $nid  = $matches[1];
    } else {
      if (!preg_match('|^http://', $src) && preg_match('|multigraph/mugl/(\d+)$|', $src, $matches)) {
	// relative url --- it must be from this site
	$nid = $matches[1];
      }
    }
  }

  // if a swf file wasn't specified, load it from the nid if present, otherwise
  // use the first available swf
  if (!$swf) {
    if ($nid) {
      $node = node_load($nid);
      if ($node) {
	$swf = $node->field_multigraph_swf['und']['0']['value'];
      }
    } else {
      $swf_paths = _multigraph_available_swf_paths();
      $swf = $swf_paths[count($swf_paths)-1];
    }
  }

  // if a width wasn't specified, load it from the node if present, otherwise use default
  if (!$width) {
    if (!$node) { $node = node_load($nid); }
    $width = $node->field_multigraph_width['und']['0']['value'];
  }

  // if a height wasn't specified, load it from the node if present, otherwise use default
  if (!$height) {
    if (!$node) { $node = node_load($nid); }
    $height = $node->field_multigraph_height['und']['0']['value'];
  }

  // if a src wasn't specified, construct it from the nid
  if (!$src) {
    $src = $base_url . "/multigraph/mugl/" . $nid;
  }

  $swf_dir = drupal_get_path('module', 'multigraph') . "/swfs";

  return _multigraph_object_embed_string($width,$height,$src,
					 $base_path . $swf_dir . "/" . $swf);
}

function multigraph_filter_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  $text = preg_replace_callback('|\[multigraph\](.+?)\[/multigraph\]|', '_multigraph_edit_tag', $text);
  return $text;
}

function multigraph_filter_tips($filter, $format, $long) {
  if ($long) {
    return t('&lt;<multigraph ... /&gt; tags turn into interactive Multigraph graphs.');
  }
  else {
    return t('&lt;<multigraph ... /&gt; tags turn into interactive Multigraph graphs.');
  }
}


function multigraph_filter_info() {
  return array(
    'multigraph' => array(
      'title'       	 => 'Replace <multigraph> tag markup with interactive Multigraphs.',
      'description' 	 => '',
      'prepare callback' => 'multigraph_filter_prepare', 
      'process callback' => 'multigraph_filter_process',
      'cache' 		 => FALSE,
      'tips'  		 => 'multigraph_filter_tips',
      'weight' 		 => -100, // A default weight for the filter in new text formats
      //
      // 'settings callback' => The name of a function that returns configuration form elements
      //                        for the filter. See hook_filter_FILTER_settings() for details.
      // 'default settings' =>  An associative array containing default settings for the filter,
      //                        to be applied when the filter has not been configured yet.
    )
  );     
}